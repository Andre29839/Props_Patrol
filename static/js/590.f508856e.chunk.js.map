{"version":3,"file":"static/js/590.f508856e.chunk.js","mappings":"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","sources":["redux/currencyRedusers/currencySelectors.js","components/Currency/Currency.styled.js","components/Currency/Currency.jsx","page/Currency/Currency.styled.js","page/Currency/Currency.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const currencySelector = state => state.currency.data;\n\nexport const isLoadingSelector = state => state.currency.isLoading;\n\nexport const selectCurrencyData = state => state.currency.data;\n\n","import styled from 'styled-components';\n\nexport const WrapperCurrency = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  width: 320px;\n  @media only screen and (min-width: 1280px) {\n    width: 480px;\n    margin-top: 32px;\n  }\n`;\n\nexport const StyledBox = styled.div`\n  width: 100%;\n  max-width: 480px;\n  color: #fff;\n`;\n\nexport const StyledTable = styled.div`\n  max-height: 170px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n\n  @media only screen and (min-width: 1280px) {\n    align-items: stretch;\n  }\n`;\n\nexport const StyledThBox = styled.div`\n  padding: 16px 30px;\n  margin-bottom: 20px;\n  background: rgba(82, 59, 126, 0.6);\n\n  display: flex;\n  flex-direction: row;\n  gap: 40px;\n  align-items: center;\n\n  @media only screen and (min-width: 1280px) {\n    justify-content: center;\n    gap: 50px;\n  }\n`;\n\nexport const StyledTdBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  text-align: start;\n  gap: 45px;\n\n  @media only screen and (min-width: 1280px) {\n    margin: 0 auto;\n    gap: 50px;\n  }\n`;\n\nexport const StyledTBody = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  gap: 24px;\n  margin-bottom: 6px;\n\n  @media only screen and (min-width: 1280px) {\n    margin-bottom: 36px;\n  }\n`;\n\nexport const StyledTh = styled.span`\n  color: var(--white);\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: calc(16 / 24);\n  text-align: center;\n`;\n\nexport const StyledTd = styled.span`\n  display: inline-block;\n  color: var(--white);\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: calc(24 / 16);\n  text-align: center;\n  width: 62px;\n  &:last-child {\n    width: 42px;\n  }\n  &:first-child {\n    width: 65px;\n  }\n`;\n\nexport const StyledImg = styled.img`\n  display: inline-block;\n  width: 100%;\n`;\n\nexport const Usd = styled.span`\n  @media only screen and (min-width: 1280px) {\n    color: #ff868d;\n    position: absolute;\n    top: 120px;\n    left: 45px;\n  }\n`;\nexport const Eur = styled.span`\n  @media only screen and (min-width: 1280px) {\n    color: #ff868d;\n    position: absolute;\n    top: 90px;\n    right: 92px;\n  }\n`;\n","import { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { currencySelector } from 'redux/currencyRedusers/currencySelectors';\nimport { currencyThunk } from 'redux/currencyRedusers/currencyThunk';\nimport {\n  Eur,\n  StyledBox,\n  StyledImg,\n  StyledTBody,\n  StyledTable,\n  StyledTd,\n  StyledTdBox,\n  StyledTh,\n  StyledThBox,\n  Usd,\n  WrapperCurrency,\n} from './Currency.styled';\n\nconst Currency = () => {\n  const [currency, setCurrency] = useState([]);\n  const dispatch = useDispatch();\n  const selectedCurrency = useSelector(currencySelector);\n  const token = useSelector(state => state.auth.token);\n\n  const currencyChart = useSelector(currencySelector);\n  const usdPurch = currencyChart[0]?.rateBuy.toFixed(2);\n  const eurPurch = currencyChart[1]?.rateBuy.toFixed(2);\n\n  const updateLastUpdatedTime = () => {\n    const newTime = Date.now();\n    localStorage.setItem('lastUpdatedTime', newTime);\n  };\n\n  useEffect(() => {\n    if (!token) return;\n    const lastUpdatedTime = localStorage.getItem('lastUpdatedTime');\n\n    const isHourPassed = () => {\n      const oneHourUpdate = 60 * 60 * 1000;\n      return Date.now() - Number(lastUpdatedTime) >= oneHourUpdate;\n    };\n\n    if (isHourPassed() || !lastUpdatedTime) {\n      dispatch(currencyThunk());\n      setCurrency(selectedCurrency);\n      updateLastUpdatedTime();\n    } else {\n      setCurrency(selectedCurrency);\n    }\n  }, [dispatch, selectedCurrency, token]);\n\n  const isMobile = useMediaQuery({ maxWidth: 767.9 });\n  const isTabletAndMobile = useMediaQuery({ minWidth: 768, maxWidth: 1279.9 });\n  const isDesktop = useMediaQuery({ minWidth: 1280 });\n\n  return (\n    <WrapperCurrency>\n      {isDesktop && (\n        <StyledBox>\n          <StyledTable>\n            <StyledThBox>\n              <StyledTh>Currency</StyledTh>\n              <StyledTh>Purchase</StyledTh>\n              <StyledTh>Sale</StyledTh>\n            </StyledThBox>\n            <StyledTBody>\n              {currency?.length &&\n                currency.map(el => {\n                  return (\n                    <StyledTdBox key={nanoid()}>\n                      <StyledTd>{el.currencyName}</StyledTd>\n                      <StyledTd>{el.rateBuy}</StyledTd>\n                      <StyledTd>{el.rateSell.toString().slice(0, -2)}</StyledTd>\n                    </StyledTdBox>\n                  );\n                })}\n              <Usd>{usdPurch}</Usd>\n              <Eur>{eurPurch}</Eur>\n            </StyledTBody>\n          </StyledTable>\n          <img src={require('../../images/chart/chart-web.png')} alt=\"chart\" />\n        </StyledBox>\n      )}\n      {isTabletAndMobile && (\n        <StyledBox>\n          <StyledTable>\n            <StyledThBox>\n              <StyledTh>Currency</StyledTh>\n              <StyledTh>Purchase</StyledTh>\n              <StyledTh>Sale</StyledTh>\n            </StyledThBox>\n            <StyledTBody>\n              {currency?.length &&\n                currency.map(el => {\n                  return (\n                    <StyledTdBox key={nanoid()}>\n                      <StyledTd>{el.currencyName}</StyledTd>\n                      <StyledTd>{el.rateBuy}</StyledTd>\n                      <StyledTd>{el.rateSell.toString().slice(0, -2)}</StyledTd>\n                    </StyledTdBox>\n                  );\n                })}\n            </StyledTBody>\n          </StyledTable>\n          <StyledImg\n            src={require('../../images/chart/chart-tablet.png')}\n            alt=\"chart\"\n          />\n        </StyledBox>\n      )}\n      {isMobile && (\n        <StyledBox>\n          <StyledTable>\n            <StyledThBox>\n              <StyledTh>Currency</StyledTh>\n              <StyledTh>Purchase</StyledTh>\n              <StyledTh>Sale</StyledTh>\n            </StyledThBox>\n            <StyledTBody>\n              {currency?.length &&\n                currency.map(el => {\n                  return (\n                    <StyledTdBox key={nanoid()}>\n                      <StyledTd>{el.currencyName}</StyledTd>\n                      <StyledTd>{el.rateBuy}</StyledTd>\n                      <StyledTd>{el.rateSell.toString().slice(0, -2)}</StyledTd>\n                    </StyledTdBox>\n                  );\n                })}\n            </StyledTBody>\n          </StyledTable>\n          <StyledImg\n            src={require('../../images/chart/chart-tablet.png')}\n            alt=\"chart\"\n          />\n        </StyledBox>\n      )}\n    </WrapperCurrency>\n  );\n};\n\nexport default Currency;\n","import styled from 'styled-components';\n\nexport const StyledBox = styled.div`\n  max-width: 480px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import Currency from 'components/Currency/Currency';\nimport { StyledBox } from './Currency.styled';\n\nconst CurrencyPage = () => {\n  return (\n    <div>\n      {' '}\n      <StyledBox>\n        <Currency />\n      </StyledBox>\n    </div>\n  );\n};\n\nexport default CurrencyPage;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["currencySelector","state","currency","data","WrapperCurrency","styled","_templateObject","_taggedTemplateLiteral","StyledBox","_templateObject2","StyledTable","_templateObject3","StyledThBox","_templateObject4","StyledTdBox","_templateObject5","StyledTBody","_templateObject6","StyledTh","_templateObject7","StyledTd","_templateObject8","StyledImg","_templateObject9","Usd","_templateObject10","Eur","_templateObject11","_currencyChart$","_currencyChart$2","_useState","useState","_useState2","_slicedToArray","setCurrency","dispatch","useDispatch","selectedCurrency","useSelector","token","auth","currencyChart","usdPurch","rateBuy","toFixed","eurPurch","useEffect","lastUpdatedTime","localStorage","getItem","Date","now","Number","currencyThunk","newTime","setItem","updateLastUpdatedTime","isMobile","useMediaQuery","maxWidth","isTabletAndMobile","minWidth","isDesktop","_jsxs","children","_jsx","length","map","el","currencyName","rateSell","toString","slice","nanoid","src","require","alt","Currency","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toUpperCase"],"sourceRoot":""}