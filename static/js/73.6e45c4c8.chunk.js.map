{"version":3,"file":"static/js/73.6e45c4c8.chunk.js","mappings":"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","sources":["services/validation/validationRegisterSchema.js","components/ConfirmPasswordIndicator/ConfirmPasswordIndicator.styled.js","components/ConfirmPasswordIndicator/ConfirmPasswordIndicator.jsx","components/IndicatorPasswordStrength/IndicatorPasswordStrength.styled.js","components/IndicatorPasswordStrength/IndicatorPasswordStrength.jsx","Hooks/usePasswordStrength.js","components/RegisterForm/RegisterForm.jsx","page/Register/Register.styled.js","page/Register/Register.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const registerSchema = yup.object().shape({\n  username: yup\n    .string()\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .min(2, 'Too Short!')\n    .max(30, 'the name must contain a maximum of 30 characters'),\n  email: yup\n    .string()\n    .email('Please enter a valid email address')\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .max(30, 'the name must contain a maximum of 30 characters'),\n  password: yup\n    .string()\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .min(6, 'Password must contain at least 6 characters')\n    .max(12, 'Password must contain a maximum of 12 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d|.*[!@#$%^&*()_+\\-=.<>])[a-zA-Z\\d!@#$%^&*()_+\\-=.<>]{6,12}$/,\n      'Password must contain at least one uppercase letter, one lowercase letter and one number'\n    ),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match')\n    .required('Confirm Password is required'),\n});\n","import styled from 'styled-components';\n\nexport const IndicatorWrapper = styled.div`\n  height: 3px;\n  background-color: ${props => (props.$passwordsMatch ? 'green' : 'red')};\n  transition: all 0.4s ease-out;\n`;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { IndicatorWrapper } from './ConfirmPasswordIndicator.styled';\n\nexport const ConfirmPasswordIndicator = ({\n  passwordsMatch,\n  values: { confirmPassword },\n}) => {\n  const width = passwordsMatch ? '100%' : '50%';\n  return (\n    confirmPassword && (\n      <IndicatorWrapper $passwordsMatch={passwordsMatch} style={{ width }} />\n    )\n  );\n};\n\nConfirmPasswordIndicator.propTypes = {\n  passwordsMatch: PropTypes.bool.isRequired,\n};\n","import styled, { css, keyframes } from 'styled-components';\n\nconst passwordStrengthAnimation = keyframes`\n  from {\n    width: 0%;\n    background-color: transparent;\n  }\n  to {\n    width:100%;\n    background-color: ${props => props.color};\n  }\n`;\n\nexport const PasswordStrengthIndicator = styled.div`\n  width: 100%;\n  height: 3px;\n  background-color: transparent;\n  border-radius: 5px;\n  animation: ${passwordStrengthAnimation} 0.5s ease;\n  width: ${props => props.width};\n  background-color: ${props => props.color};\n  transition: all 0.4s ease-out;\n  ${props => css`\n    background-color: ${props.color};\n  `};\n`;\n\nexport const PasswordStrengthText = styled.p`\n  margin-top: 5px;\n  color: ${props => props.color};\n  font-size: 14px;\n  font-weight: bold;\n`;\n","import PropTypes from 'prop-types';\nimport { usePasswordStrength } from 'Hooks/usePasswordStrength';\nimport {\n  PasswordStrengthIndicator,\n  PasswordStrengthText,\n} from './IndicatorPasswordStrength.styled';\n\nexport const IndicatorPasswordStrength = ({ values }) => {\n  const {\n    getPasswordStrengthWidth,\n    getPasswordStrengthColor,\n    getPasswordStrengthText,\n  } = usePasswordStrength();\n\n  return (\n    <>\n      <PasswordStrengthIndicator\n        width={getPasswordStrengthWidth(values.password)}\n        color={getPasswordStrengthColor(values.password)}\n      />\n      <PasswordStrengthText color={getPasswordStrengthColor(values.password)}>\n        {getPasswordStrengthText(values.password)}\n      </PasswordStrengthText>\n    </>\n  );\n};\n\nIndicatorPasswordStrength.propTypes = {\n  values: PropTypes.shape({\n    password: PropTypes.string,\n  }).isRequired,\n};\n","export const usePasswordStrength = () => {\n  const getPasswordStrengthWidth = password => {\n    const maxLength = 10;\n    const passwordLength = password?.length || 0;\n    const strengthPercentage = (passwordLength / maxLength) * 100;\n    return `${Math.min(strengthPercentage, 100)}%`;\n  };\n\n  const getPasswordStrengthColor = password => {\n    const passwordStrengthRanges = [\n      { length: 1, color: '#FD450B' },\n      { length: 3, color: '#FF6231' },\n      { length: 4, color: '#F37952' },\n      { length: 5, color: '#FC675D' },\n      { length: 6, color: '#F6C881' },\n      { length: 7, color: '#FBEC67' },\n      { length: 8, color: '#F8E32B' },\n      { length: 9, color: '#CAF98F' },\n      { length: 10, color: '#52E54F' },\n      { length: Infinity, color: '#099E06' },\n    ];\n\n    const { color } = passwordStrengthRanges.find(\n      range => password?.length <= range.length\n    ) || {\n      color: 'transparent',\n    };\n    return color;\n  };\n\n  const getPasswordStrengthText = password => {\n    const passwordStrengthRanges = [\n      { min: 2, max: 6, text: 'Weak Password' },\n      { min: 7, max: 10, text: 'Medium Strength Password' },\n      { min: 11, max: Infinity, text: 'Strong Password' },\n    ];\n\n    const { text } = passwordStrengthRanges.find(\n      range => password?.length >= range.min && password?.length <= range.max\n    ) || { text: '' };\n\n    return text;\n  };\n\n  return {\n    getPasswordStrengthWidth,\n    getPasswordStrengthColor,\n    getPasswordStrengthText,\n  };\n};\n","import { toast } from 'react-toastify';\nimport { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\n\nimport { registerSchema } from 'services/validation/validationRegisterSchema';\nimport { usePasswordToggle } from 'Hooks/usePasswordToggle';\n\nimport { FormError } from 'components/FormError/FormError';\nimport { Logo } from 'components/Logo/Logo';\nimport { TogglePasswordIcon } from 'components/TogglePasswordVisibility/TogglePasswordVisibility';\nimport { ConfirmPasswordIndicator } from 'components/ConfirmPasswordIndicator/ConfirmPasswordIndicator';\n\nimport {\n  LinkStyled,\n  NameRegisterIcon,\n  WrapperFormReg,\n} from './RegisterForm.styled';\nimport {\n  EmailIcon,\n  FieldStyled,\n  FormStyled,\n  PasswordlIcon,\n  WrapperButton,\n  WrapperField,\n  WrapperIcon,\n  WrapperIcon2,\n  WrapperIcon3,\n} from 'components/LoginForm/LoginForm.styled';\nimport Button from 'components/Button/Button';\nimport { IndicatorPasswordStrength } from 'components/IndicatorPasswordStrength/IndicatorPasswordStrength';\nimport { registerThunk } from 'redux/registerReducers/registerThunks';\n\nexport const RegisterForm = () => {\n  const { showPasswords, togglePasswordVisibility } = usePasswordToggle([\n    'password1',\n    'password2',\n  ]);\n\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  };\n\n  const handleSubmit = (value, { resetForm }) => {\n    const { username, email, password } = value;\n    dispatch(registerThunk({ username, email, password }))\n      .unwrap()\n      .then(data => {\n        resetForm();\n        toast.success(\n          `Hi! ${data.user.username}, thanks for signing up. Welcome to Money Guard! We are happy to approve you!`\n        );\n      })\n      .catch(error => {\n        toast.error(`${error}`);\n      });\n  };\n\n  return (\n    <WrapperFormReg>\n      <Logo />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={registerSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ values, handleChange, handleBlur, touched, errors }) => (\n          <FormStyled autoComplete=\"off\">\n            <WrapperField>\n              <WrapperIcon>\n                <FieldStyled\n                  type=\"text\"\n                  name=\"username\"\n                  placeholder=\"First name\"\n                  autoComplete=\"off\"\n                  required\n                />\n                <NameRegisterIcon />\n              </WrapperIcon>\n              <FormError name=\"username\" touched={touched} errors={errors} />\n              <WrapperIcon>\n                <FieldStyled\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  autoComplete=\"off\"\n                  required\n                />\n                <EmailIcon size={24} />\n              </WrapperIcon>\n              <FormError name=\"email\" touched={touched} errors={errors} />\n\n              <WrapperIcon3>\n                <WrapperIcon2>\n                  <FieldStyled\n                    type={showPasswords.password1 ? 'text' : 'password'}\n                    name=\"password\"\n                    title=\"Enter the password more difficult, letter, digit, capital letter.\"\n                    placeholder=\"Password\"\n                    required\n                    value={values.password}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    autoComplete=\"off\"\n                  />\n                  <PasswordlIcon />\n                </WrapperIcon2>\n                <TogglePasswordIcon\n                  showPassword={showPasswords.password1}\n                  onToggle={() => togglePasswordVisibility('password1')}\n                />\n              </WrapperIcon3>\n              <IndicatorPasswordStrength values={values} />\n              <FormError name=\"password\" touched={touched} errors={errors} />\n              <WrapperIcon3>\n                <WrapperIcon2>\n                  <FieldStyled\n                    type={showPasswords.password2 ? 'text' : 'password'}\n                    name=\"confirmPassword\"\n                    title=\"Enter the password more difficult, letter, digit, capital letter.\"\n                    placeholder=\"Confirm Password\"\n                    autoComplete=\"off\"\n                    required\n                  />\n                  <PasswordlIcon />\n                </WrapperIcon2>\n                <TogglePasswordIcon\n                  showPassword={showPasswords.password2}\n                  onToggle={() => togglePasswordVisibility('password2')}\n                />\n              </WrapperIcon3>\n              <ConfirmPasswordIndicator\n                values={values}\n                passwordsMatch={\n                  values.password === values.confirmPassword &&\n                  values.confirmPassword !== ''\n                }\n              />\n              <FormError name=\"confirmPassword\" />\n            </WrapperField>\n            <WrapperButton>\n              <Button type=\"submit\" text=\"register\" />\n            </WrapperButton>\n          </FormStyled>\n        )}\n      </Formik>\n      <LinkStyled to=\"/login\">Log in</LinkStyled>\n    </WrapperFormReg>\n  );\n};\n","import styled from 'styled-components';\nimport mobile from 'images/register-bg/bg-register-mobile.jpg';\nimport mobile2x from 'images/register-bg/bg-register-mobile@2x.jpg';\nimport tablet from 'images/register-bg/bg-register-tablet.jpg';\nimport tablet2x from 'images/register-bg/bg-register-tablet@2x.jpg';\nimport desctop from 'images/register-bg/bg-register-desktop.jpg';\nimport desctop2x from 'images/register-bg/bg-register-desktop@2x.jpg';\n\nexport const PublicPageContainer = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-position: center;\n  background-repeat: no-repeat;\n\n  background-size: cover;\n  background-image: url(${mobile});\n\n  @media (min-device-pixel-ratio: 2),\n    (-webkit-min-device-pixel-ratio: 2),\n    (min-resolution: 192dpi),\n    (min-resolution: 2dppx) {\n    background-image: url(${mobile2x});\n  }\n\n  @media (min-width: 768px) {\n    background-image: url(${tablet});\n\n    @media (min-device-pixel-ratio: 2),\n      (-webkit-min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url(${tablet2x});\n    }\n  }\n\n  @media (min-width: 1280px) {\n    background-image: url(${desctop});\n\n    @media (min-device-pixel-ratio: 2),\n      (-webkit-min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url(${desctop2x});\n    }\n  }\n`;\n\nexport const PublicPageBox = styled.div`\n  max-height: 100%;\n  overflow-y: auto;\n`;\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { PublicPageContainer } from './Register.styled';\n\nconst RegisterPage = () => {\n  return (\n    <PublicPageContainer>\n      <RegisterForm />\n    </PublicPageContainer>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["registerSchema","yup","shape","username","test","value","trim","required","min","max","email","password","matches","confirmPassword","oneOf","IndicatorWrapper","styled","_templateObject","_taggedTemplateLiteral","props","$passwordsMatch","ConfirmPasswordIndicator","_ref","passwordsMatch","width","values","_jsx","style","passwordStrengthAnimation","keyframes","color","PasswordStrengthIndicator","_templateObject2","css","_templateObject3","PasswordStrengthText","_templateObject4","IndicatorPasswordStrength","_usePasswordStrength","getPasswordStrengthWidth","strengthPercentage","length","concat","Math","getPasswordStrengthColor","Infinity","find","range","getPasswordStrengthText","text","_jsxs","_Fragment","children","RegisterForm","_usePasswordToggle","usePasswordToggle","showPasswords","togglePasswordVisibility","dispatch","useDispatch","WrapperFormReg","Logo","Formik","initialValues","validationSchema","onSubmit","resetForm","registerThunk","unwrap","then","data","toast","user","catch","error","_ref2","handleChange","handleBlur","touched","errors","FormStyled","autoComplete","WrapperField","WrapperIcon","FieldStyled","type","name","placeholder","NameRegisterIcon","FormError","EmailIcon","size","WrapperIcon3","WrapperIcon2","password1","title","onChange","onBlur","PasswordlIcon","TogglePasswordIcon","showPassword","onToggle","password2","WrapperButton","Button","LinkStyled","to","PublicPageContainer","mobile2x","tablet","tablet2x","desctop","desctop2x"],"sourceRoot":""}